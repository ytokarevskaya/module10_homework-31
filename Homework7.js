let myArray = [1111, 5, 3, 4, null, undefined, 4, 5, null, 5, false, "aaa", 0, NaN];

let zero = 0, even = 0, odd = 0;

for(var i=0; i < myArray.length; i++){
    if (typeof myArray[i] === 'number' && !isNaN(myArray[i])) {
        if (myArray[i] === 0) {
            zero++;
        } else if (isEven(myArray[i])) {
            even++;
        } else {
            odd++;
        }
    }
}

function isEven(num){
    return num % 2 == 0;
}

console.log("кол-во нулей - " + zero)
console.log("кол-во четных чисел - " + even)
console.log("кол-во нечетный чисел - " + odd)

// Задание выполнено почти верно (нули нужно было посчитать, так же как четные и нечетные числа), но код далек от оптимального. Есть несколько проблем:
// 1. Вы перебираете массив трижды (в методе filter и дважды в цикле for). Это не оптимально и на больших объемах данных существенно замедляло бы работу кода. Для решения задачи достаточно перебрать элементы цикла 1 раз.
// 2. Если вы хотите использовать отдельную функцию для проверки на четность (хотя в данном случае, как мне кажется, в этом нет необходимости. Проще просто написать условие), старайтесь, чтобы функции были как можно более универсальными. Например, вместо 2-х функций Even и notEven достаточно использовать одну из них - Even. Она возвращает результат логического выражения, который может быть равен true (если число четное) или false (если нечетное). Таким образом, эту функцию можно использовать и для проверки на нечетность
// 3. Проверка на тип (в методе filter) сделана не до конца правильно. При работе с числами нужно помнить о значении NaN. Особенность этого значения в том, что NaN тоже имеет тип number, хотя и не является числом. Поэтому чтобы отсеять все нечисловые значения, нужно использовать также проверку isNaN.
// 4. Не забывайте, пожалуйста, о правилах именования переменных: имена должны быть осмысленными, чтобы по имени было понятно, за что эта переменная отвечает. Также имена переменных должны быть написаны в формате camelCase (за исключением имен классов и функций-конструкторов).
// Выше исправила перечисленные ошибки